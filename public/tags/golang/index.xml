<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>golang - Tag - cat3306</title>
        <link>http://example.org/tags/golang/</link>
        <description>golang - Tag - cat3306</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 15 Nov 2022 14:58:38 &#43;0800</lastBuildDate><atom:link href="http://example.org/tags/golang/" rel="self" type="application/rss+xml" /><item>
    <title>go pprof</title>
    <link>http://example.org/pprof/</link>
    <pubDate>Tue, 15 Nov 2022 14:58:38 &#43;0800</pubDate>
    <author>cat3306</author>
    <guid>http://example.org/pprof/</guid>
    <description><![CDATA[]]></description>
</item>
<item>
    <title>go Select</title>
    <link>http://example.org/select/</link>
    <pubDate>Sat, 29 Oct 2022 15:10:28 &#43;0800</pubDate>
    <author>cat3306</author>
    <guid>http://example.org/select/</guid>
    <description><![CDATA[]]></description>
</item>
<item>
    <title>go pkg</title>
    <link>http://example.org/go-pkg/</link>
    <pubDate>Thu, 27 Oct 2022 14:32:00 &#43;0800</pubDate>
    <author>cat3306</author>
    <guid>http://example.org/go-pkg/</guid>
    <description><![CDATA[golang 框架和库 web 框架 gin
orm gorm
显示进度条 progressbar
下载文件 grab
日志 zap
RPC gRPC
rpcx
爬虫 colly
工具函数库 lancet
分布式存储 minio
redis cli 终端UI 非常漂亮的终端ui
tview]]></description>
</item>
<item>
    <title>go dlv</title>
    <link>http://example.org/go-dlv/</link>
    <pubDate>Wed, 12 Oct 2022 15:24:21 &#43;0800</pubDate>
    <author>cat3306</author>
    <guid>http://example.org/go-dlv/</guid>
    <description><![CDATA[dlv dlv 是golang 的调试工具
github
简易教程
简易例子
1 2 3 4 5 6 func main() { slice := make([]int, 0) for i := 1; i &lt; 10; i++ { slice = append(slice, i) } } cd 代码根目录
1 2 3 $ dlv deug Type &#39;help&#39; for list of commands. (dlv) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 (dlv) help The following commands are available: Running the program: call ------------------------ Resumes process, injecting a function call (EXPERIMENTAL!]]></description>
</item>
<item>
    <title>go sync</title>
    <link>http://example.org/go-sync/</link>
    <pubDate>Fri, 29 Jul 2022 11:28:50 &#43;0800</pubDate>
    <author>cat3306</author>
    <guid>http://example.org/go-sync/</guid>
    <description><![CDATA[为什么要同步 操作系统中进程拥有自己的虚拟内存空间，彼此访问不了对方的内存区域，这是操作系统层面上的内存安全。但是由于线程是操作系统的调度单位，多个线程共享进程的内存空间，并发的访问(读写)同一块内存会出现一些诡异的问题。同步访问内存是多线程编程不可逾越的操作。对golang稍微熟悉一点就会知道常用的map并发并不安全，如果出现多个goroutine同时读写，程序会发生崩溃。
互斥锁 锁的基本思想是：同一个时刻只有一个线程处于一块代码段，这块代码段称为临界区，刚开始的时候thread0进入临界区前会检查一个变量state是否为0，如果是0代表可以进入临界区，并且将state置为1，处理完逻辑后，离开临界区把state置为0。当然对于state操作是原子性的，否则这是个无穷无尽的并发问题。具体思想如下<i class="far fa-hand-point-down fa-fw" aria-hidden="true"></i>
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 package main import ( &#34;fmt&#34; &#34;sync/atomic&#34; &#34;time&#34; ) var ( state int32 CriticalZone = map[int]int{} WriteCount int ReadCount int ) const ( LockState = 1 UnLockState = 0 ) func Lock() bool { return atomic.]]></description>
</item>
<item>
    <title>go 异步抢占调度</title>
    <link>http://example.org/goroutine-preemption/</link>
    <pubDate>Mon, 25 Jul 2022 14:20:31 &#43;0800</pubDate>
    <author>cat3306</author>
    <guid>http://example.org/goroutine-preemption/</guid>
    <description><![CDATA[]]></description>
</item>
<item>
    <title>go map</title>
    <link>http://example.org/go-map/</link>
    <pubDate>Sat, 25 Jun 2022 14:05:06 &#43;0800</pubDate>
    <author>cat3306</author>
    <guid>http://example.org/go-map/</guid>
    <description><![CDATA[]]></description>
</item>
<item>
    <title>go http</title>
    <link>http://example.org/go-http/</link>
    <pubDate>Wed, 20 Apr 2022 14:25:07 &#43;0800</pubDate>
    <author>cat3306</author>
    <guid>http://example.org/go-http/</guid>
    <description><![CDATA[]]></description>
</item>
<item>
    <title>go slice</title>
    <link>http://example.org/go-slice/</link>
    <pubDate>Sat, 26 Mar 2022 17:35:02 &#43;0800</pubDate>
    <author>cat3306</author>
    <guid>http://example.org/go-slice/</guid>
    <description><![CDATA[]]></description>
</item>
<item>
    <title>go cli</title>
    <link>http://example.org/go-cli/</link>
    <pubDate>Fri, 25 Mar 2022 08:13:36 &#43;0800</pubDate>
    <author>cat3306</author>
    <guid>http://example.org/go-cli/</guid>
    <description><![CDATA[]]></description>
</item>
</channel>
</rss>
